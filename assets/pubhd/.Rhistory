a = N * log(2/(pi*gamma))
}
b = log( (4*((m_i - m_0)^2)*(gamma^-2)) +1)
b[!is.finite(b)] <- 0
a - sum(b)
}
m_0 = seq(760,810,by=1)
ll <- lapply(m_0, function(x) loglikelihood(masses,12,x))
plot(m_0,ll,type = "line",main = 'title',xlab = expression('m'[0]),ylab='Log likelihood')
gamma_i = seq(8,16,by=0.1)
ll <- lapply(gamma_i, function(x) loglikelihood(masses,x,784))
plot(gamma_i,ll,type = "line")
mstar = iterate(775,10,16)
mstar
gammastar = iterate(16,5,mstar,var=F)
gammastar
iterate <- function(x,deltax,y,var = TRUE){
if(var){
l1 = loglikelihood(masses,y,x-deltax)
l2 = loglikelihood(masses,y,x)
l3 = loglikelihood(masses,y,x+deltax)
}
else{
l1 = loglikelihood(masses,x-deltax,y)
l2 = loglikelihood(masses,x,y)
l3 = loglikelihood(masses,x+deltax,y)
}
(x+deltax) - deltax*(((l3-l2)/(l1-(2*l2)+l3)) + 0.5)
}
mstar = iterate(775,10,16)
mstar
gammastar = iterate(16,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(mstar,10,gammastar)
mstar
gammastar = iterate(gammastar,5,mstar,var=F)
gammastar
mstar = iterate(775,5,16)
mstar
gammastar = iterate(16,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
mstar = iterate(mstar,5,gammastar)
mstar
gammastar = iterate(gammastar,3,mstar,var=F)
gammastar
m2 = 775
deltam = 10
m1 = m2 - deltam
m3 = m2 + deltam
l1 = loglikelihood(masses,16,m1)
l2 = loglikelihood(masses,16,m2)
l3 = loglikelihood(masses,16,m3)
l1
l2
l3
data = matrix(nrow = length(gamma_i), ncol = length(m_0))
n = 0
for(i in gamma_i){
n=n+1
d = 0
for(j in m_0){
d=d+1
data[n,d] = loglikelihood(masses,i,j)
}
}
library(hexbin)
install.packages("hexbin")
library(hexbin)
hexbin(data)
hb <- hexbin(data)
plot(hb)
data
hexbinplot(hb)
hexbinplot(x~y,data)
hexbinplot(x~y,data = data)
library(gplots)
install.packages("gplots")
library(gplots)
hist2d(df)
image(data)
data = matrix(nrow = length(gamma_i), ncol = length(m_0))
n = 0
for(i in gamma_i){
n=n+1
d = 0
for(j in m_0){
d=d+1
data[n,d] = loglikelihood(masses,i,j)
}
}
image(data)
install.packages(c("coin", "curl", "git2r", "jsonlite", "maps", "plotly", "raster", "Rcpp", "rgl", "roxygen2", "rstudioapi"))
install.packages("Rcpp", lib="/usr/lib/R/site-library")
install.packages("mgcv", lib="/usr/lib/R/library")
install.packages('dplyr')
ls
?datasets
library(help="datasets")
hist(X,breaks=30,probability=TRUE)
lines(x,y)
N<-10000 #number of uniform random variables
X<-rep(NA,2*N)
U1<-runif(N)
U2<-runif(N)
X1<-sqrt(-2*log(U1))*cos(2*pi*U2)
X2<-sqrt(-2*log(U1))*sin(2*pi*U2)
X<-c(X1,X2)
x<-seq(min(X),max(X),length=50)
y=exp(-x^2/2)/sqrt(2*pi)
hist(X,breaks=30,probability=TRUE)
lines(x,y)
X
str(X)
X[0]
X[1]
X[1,]
c(1,2)
x<-seq(min(X1),max(X),length=50)
y=exp(-x^2/2)/sqrt(2*pi)
hist(X,breaks=30,probability=TRU)E
lines(x,y)
x<-seq(min(X1),max(X1),length=50)
y=exp(-x^2/2)/sqrt(2*pi)
hist(X1,breaks=30,probability=TRU)E
lines(x,y)
hist(X1,breaks=30,probability=TRUE)
lines(x,y)
hist(X2,breaks=30,probability=TRUE)
lines(x,y)
?norm
pnorm(x,mean = 0,sd = 1)
y <- pnorm(x,mean = 0,sd = 1)
hist(X2,breaks=30,probability=TRUE)
lines(x,y)
y <- dnorm(x,mean = 0,sd = 1)
lines(x,y)
y <- dnorm(x,mean = 0,sd = 1)
hist(X2,breaks=30,probability=TRUE)
lines(x,y)
matrix((1,9,2,3),nrow=2,ncol=2)
matrix(c(1,9,2,3),nrow=2,ncol=2)
matrix(c(1,9,2,3),nrow=2,ncol=2,byrow = T)
A = matrix(c(1,9,2,3),nrow=2,ncol=2,byrow = T)
B = matrix(c(2,2,1,4),nrow=2,ncol=2,byrow = T)
C = matrix(c(1,2,3,2,10,1,1,3,4),nrow=3,ncol=3,byrow = T)
D = matrix(c(1,1,2,2,3,4,2,2,4),nrow=2,ncol=2,byrow = T)
A = matrix(c(1,9,2,3),nrow=2,ncol=2,byrow = T)
B = matrix(c(2,2,1,4),nrow=2,ncol=2,byrow = T)
C = matrix(c(1,2,3,2,10,1,1,3,4), nrow = 3, ncol = 3, byrow = T)
D = matrix(c(1,1,2,2,3,4,2,2,4), nrow = 3, ncol = 3, byrow = T)
A
B
C
D
A + B
A - B
t(A)
t(B)
C + D
C - D
A*B
B*A
A*B == B*A
A*B
A = B
C = matrix(c(1,2,3,2,10,1,1,3,4), nrow = 3, ncol = 3, byrow = T)
A = matrix(c(1,9,2,3),nrow=2,ncol=2,byrow = T)
B = matrix(c(2,2,1,4),nrow=2,ncol=2,byrow = T)
C = matrix(c(1,2,3,2,10,1,1,3,4), nrow = 3, ncol = 3, byrow = T)
D = matrix(c(1,1,2,2,3,4,2,2,4), nrow = 3, ncol = 3, byrow = T)
A == B
A*B == B*A
C*D
D*C
C*D == D*C
det(A)
A
?det
det(A)
det(B)
A
det(D)
det(C)
det(D)
det(A)
det(B)
det(A)
det(B)
det(B)
```
#### (ii)
```{r}
det(C)
det(D)
D^-1
A^-1
identity(0)
identity(1)
identity(1,2)
identity(2)
identity(c(1,2))
library(MASS)
ginv(A)
ginv(A)*A
ginv(A)
solve(A)
solve(A)*A
solve(A)
A
solve(A)
A %*% B
B %*% A
A %*% B == B %*% A
solve(A)
solve(A) %*% A
A
int(solve(A) %*% A)
integer(solve(A) %*% A)
solve(A) %*% A
solve(C)
solve(D)
solve(C) %*% C
solve(C) %*% C == diag(3)
diag(3)
all.equal(solve(C) %*% C, diag(3))
all.equal(solve(C) %*% C, D)
E = c(1,2)
A
A %*% E
Z = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1,1,2,-8,0), nrow = 4, ncol = 5, byrow = T)
Z
Z = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1,1,2,-8,0), nrow = 5, ncol = 4, byrow = T)
Z
A = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1), nrow = 5, ncol = 4, byrow = T)
A
A = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1), nrow = 4, ncol = 4, byrow = T)
A
A = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1), nrow = 4, ncol = 4, byrow = T)
x = c(w,x,y,z)
B = c(-1,-2,8,0)
x = c('w','x','y','z')
A %*% x
A = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1), nrow = 4, ncol = 4, byrow = T)
x = c(1,1,1,1) # ('w','x','y','z')
B = c(-1,-2,8,0)
A %*% x
B
A = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1,1,2,-8,0), nrow = 5, ncol = 4, byrow = T)
A
A = matrix(c(2,-7,0,1,3,2,1,2,4,3,2,0,6,5,0,1), nrow = 4, ncol = 4, byrow = T)
B = c(-1,-2,8,0)
X = solve(A) %*% B
X
A
solve A
B
solve(A)
pi
?curve
curve(0.5 + 0.4*sin(2*pi*x),0,1)
x <- range(c(0,1,11))
x
x <- seq(0,1,11)
x
?seq
x <- seq(0,1,length.out=11)
x
Y <- y(x)
y <- function(x){
0.5 + 0.4 * sin(2 * pi * x)
}
x <- seq(0,1,length.out=11)
Y <- y(x)
Y
curve(0.5 + 0.4*sin(2*pi*x),0,1)
rnorm(11)
rnorm(11,mean = 0,sd = 0.05)
Y <- y(x) + rnorm(11,mean = 0,sd = 0.05)
Y
plot(x,Y)
plot(x,Y) + curve(0.5 + 0.4*sin(2*pi*x),0,1)
plot(x,Y)
par(new=T)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
plot(x,Y)
par(new=T)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
par(new=F)
plot(x,Y)
par(new=F)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
plot(x,Y)
par(new=Y)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
plot(x,Y)
par(new=Y)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
plot(x,Y)
par(new=Y)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
par(new=Y)
plot(x,Y)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
points(x,Y)
poly(x,Y,degree = 1)
lines(poly(x,Y,degree = 1))
lm(Y ~ poly(x,3))
lm(Y ~ poly(x,1))
model1 <- lm(Y ~ poly(x,1))
model1 <- lm(Y ~ poly(x,1))
lines(model1(x))
predict(model1,x)
predict(model1,data.frame(x))
x
lines(predict(model1,data.frame(x)))
lines(x,predict(model1,data.frame(x)))
model2 <- lm(Y ~ poly(x,2))
lines(x,predict(model2,data.frame(x)))
lines(x,predict(model2,data.frame(x)))
lines(x,predict(model2,data.frame(x)))
lines(x,predict(model2,data.frame(x)))
y <- function(x){
0.5 + 0.4 * sin(2 * pi * x)
}
x <- seq(0,1,length.out=11)
Y <- y(x) + rnorm(11,mean = 0,sd = 0.05)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
points(x,Y)
model1 <- lm(Y ~ poly(x,1))
lines(x,predict(model1,data.frame(x)))
model2 <- lm(Y ~ poly(x,2))
lines(x,predict(model2,data.frame(x)))
model3 <- lm(Y ~ poly(x,3))
lines(x,predict(model3,data.frame(x)))
y <- function(x){
0.5 + 0.4 * sin(2 * pi * x)
}
x <- seq(0,1,length.out=11)
Y <- y(x) + rnorm(11,mean = 0,sd = 0.05)
model1 <- lm(Y ~ poly(x,1))
lines(x,predict(model1,data.frame(x)))
plot(x,predict(model1,data.frame(x)))
plot(x,predict(model2,data.frame(x)))
plot(x,predict(model3,data.frame(x)))
X <- seq(0,1,1000)
model1 <- lm(Y ~ poly(x,1))
lines(X,predict(model1,data.frame(X)))
model2 <- lm(Y ~ poly(x,2))
lines(X,predict(model2,data.frame(X)))
model3 <- lm(Y ~ poly(x,3))
lines(X,predict(model3,data.frame(X)))
predict(model2,data.frame(X)
predict(model2,data.frame(X))
predict(model2,data.frame(X))
ata.frame(X)
data.frame(X)
X <- seq(0,1,1000)
X
X <- seq(0,1,length.out=1000)
X
model1 <- lm(Y ~ poly(x,1))
lines(X,predict(model1,data.frame(X)))
model2 <- lm(Y ~ poly(x,2))
lines(X,predict(model2,data.frame(X)))
model3 <- lm(Y ~ poly(x,3))
lines(X,predict(model3,data.frame(X)))
predict(model1,data.frame(X))
y <- function(x){
0.5 + 0.4 * sin(2 * pi * x)
}
x <- seq(0,1,length.out=11)
Y <- y(x) + rnorm(11,mean = 0,sd = 0.05)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
points(x,Y)
X <- seq(0,1,length.out=1000)
model1 <- lm(Y ~ poly(x,1))
lines(X,predict(model1,data.frame(X)))
model2 <- lm(Y ~ poly(x,2))
lines(X,predict(model2,data.frame(X)))
model3 <- lm(Y ~ poly(x,3))
lines(X,predict(model3,data.frame(X)))
X
predict(model1,data.frame(X))
model1
model1
predict(model1,2)
predict(model1,0.3)
predict(model1)
predict(model1)
predict(model1)
model1
lines(X,predict(model1,data.frame(x=X)))
lines(X,predict(model2,data.frame(X)))
lines(X,predict(model2,data.frame(x=X)))
lines(X,predict(model3,data.frame(x=X)))
lines(X,predict(model3,data.frame(x=X)),colour='red')
lines(X,predict(model3,data.frame(x=X)),color='red')
?lines
lines(X,predict(model3,data.frame(x=X)),col='red')
lines(X,predict(model2,data.frame(x=X)),col='green')
lines(X,predict(model1,data.frame(x=X)),col='blue')
lines(X,predict(model1,data.frame(x=X)),col='blue',lty=3)
y <- function(x){
0.5 + 0.4 * sin(2 * pi * x)
}
x <- seq(0,1,length.out=11)
Y <- y(x) + rnorm(11,mean = 0,sd = 0.05)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
points(x,Y)
X <- seq(0,1,length.out=1000)
model1 <- lm(Y ~ poly(x,1))
lines(X,predict(model1,data.frame(x=X)),col='blue',lty=3)
y <- function(x){
0.5 + 0.4 * sin(2 * pi * x)
}
x <- seq(0,1,length.out=11)
Y <- y(x) + rnorm(11,mean = 0,sd = 0.05)
curve(0.5 + 0.4*sin(2*pi*x),0,1)
points(x,Y)
X <- seq(0,1,length.out=1000)
model1 <- lm(Y ~ poly(x,1))
lines(X,predict(model1,data.frame(x=X)),col='blue',lty=3)
model2 <- lm(Y ~ poly(x,2))
lines(X,predict(model2,data.frame(x=X)),col='green',lty=3)
model3 <- lm(Y ~ poly(x,3))
lines(X,predict(model3,data.frame(x=X)),col='red',lty=3)
getwd()
setwd("sussex/phd_materials/pubhd/")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
